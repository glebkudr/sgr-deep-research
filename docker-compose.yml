version: "3.9"

services:
  neo4j:
    image: neo4j:5.22.0-community
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    env_file:
      - .env
    environment:
      NEO4J_AUTH: "${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-neo4j}"
      NEO4J_server_memory_heap_initial__size: "${NEO4J_HEAP_SIZE:-8G}"
      NEO4J_server_memory_heap_max__size: "${NEO4J_HEAP_SIZE:-8G}"
      NEO4J_server_memory_pagecache_size: "${NEO4J_PAGECACHE_SIZE:-8G}"
      NEO4J_dbms_default__database: "${NEO4J_DATABASE:-neo4j}"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_server_config_strict__validation_enabled: "false"
      NEO4J_PLUGINS: "[\"apoc\"]"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a bolt://localhost:7687 -u ${NEO4J_USERNAME:-neo4j} -p ${NEO4J_PASSWORD:-neo4j} 'RETURN 1'"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - backend

  redis:
    image: redis:7.4-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - backend

  graphrag-api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file:
      - .env
    environment:
      API_PORT: "${API_PORT:-8000}"
      API_HOST: "${API_HOST:-0.0.0.0}"
      API_ALLOWED_ORIGINS: '["http://localhost:${FRONTEND_PORT:-3000}"]'
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./workspace:${WORKSPACE_DIR:-/workspace}
      - ./indexes:${INDEXES_DIR:-/indexes}
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - backend
      - frontend

  graphrag-indexer:
    build:
      context: .
      dockerfile: services/indexer/Dockerfile
    env_file:
      - .env
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./workspace:${WORKSPACE_DIR:-/workspace}
      - ./indexes:${INDEXES_DIR:-/indexes}
    networks:
      - backend

  front:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: "http://localhost:8000"
        NEXT_PUBLIC_JWT: "${NEXT_PUBLIC_JWT:-}"
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8000"
      NEXT_PUBLIC_JWT: "${NEXT_PUBLIC_JWT:-}"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      graphrag-api:
        condition: service_started
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins:
  redis_data:
